diff -rcNP linux-3.14.4/include/linux/mm_types.h linux-3.14.4-memSwap/include/linux/mm_types.h
*** linux-3.14.4/include/linux/mm_types.h	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/include/linux/mm_types.h	2016-07-15 09:49:20.098956000 -0400
***************
*** 195,200 ****
--- 195,205 ----
  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS
  	int _last_cpupid;
  #endif
+ 
+ 	int idx;
+ 	unsigned long rmap_addrs[10];
+ 	struct vm_area_struct* rmap_vmas[10];
+ 
  }
  /*
   * The struct page can be forced to be double word aligned so that atomic ops
diff -rcNP linux-3.14.4/include/linux/swapfile.h linux-3.14.4-memSwap/include/linux/swapfile.h
*** linux-3.14.4/include/linux/swapfile.h	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/include/linux/swapfile.h	2016-07-15 15:08:51.975386535 -0400
***************
*** 10,13 ****
--- 10,15 ----
  extern struct swap_info_struct *swap_info[];
  extern int try_to_unuse(unsigned int, bool, unsigned long);
  
+ void set_memswap_init_size(unsigned long init_size);
+ 
  #endif /* _LINUX_SWAPFILE_H */
diff -rcNP linux-3.14.4/include/linux/swap.h linux-3.14.4-memSwap/include/linux/swap.h
*** linux-3.14.4/include/linux/swap.h	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/include/linux/swap.h	2016-07-21 13:48:38.904651502 -0400
***************
*** 253,258 ****
--- 253,276 ----
  	struct work_struct discard_work; /* discard worker */
  	struct swap_cluster_info discard_cluster_head; /* list head of discard clusters */
  	struct swap_cluster_info discard_cluster_tail; /* list tail of discard clusters */
+ 	
+ 	char *shm; /*swap to (shared) memory*/
+        
+ 	unsigned long *mapper; /*mapping from contiguous address to non-continguous in the shared memory*/
+ 	unsigned long shm_start;
+         unsigned long shm_end;
+         unsigned long disk_start;
+         unsigned long disk_end;
+         unsigned long mask;
+         struct file *dump_file;
+ 	int is_dump;
+ 
+ };
+ 
+ struct swapin_mdata{
+         struct vm_area_struct *vma;
+         pmd_t *pmd;
+         unsigned long address;
  };
  
  struct swap_list_t {
diff -rcNP linux-3.14.4/mm/page_io.c linux-3.14.4-memSwap/mm/page_io.c
*** linux-3.14.4/mm/page_io.c	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/mm/page_io.c	2016-07-20 15:04:12.635369000 -0400
***************
*** 24,29 ****
--- 24,63 ----
  #include <linux/blkdev.h>
  #include <asm/pgtable.h>
  
+ typedef int (* swap_writepage_hook)(struct page *page, struct writeback_control *wbc, void (*end_write_func)(struct bio *, int));
+ 
+ typedef int (* swap_readpage_hook)(struct page *page);
+ 
+ typedef struct swapin_mdata* (* get_swapin_mdata_hook)(unsigned long offset);
+ 
+ bool mempipe_installed = false;
+ int (* __my_swap_writepage)(struct page *page, struct writeback_control *wbc, void (*end_write_func)(struct bio *, int)) = NULL;
+ int (* __my_swap_readpage)(struct page *page) = NULL;
+ struct swapin_mdata* (* __my_get_swapin_mdata)(unsigned long offset) = NULL;
+ 
+ void swap_bind_hook(swap_writepage_hook h1, swap_readpage_hook h2, get_swapin_mdata_hook h3)                                                                     
+ {
+         mempipe_installed = true;
+         __my_swap_writepage = h1;
+         __my_swap_readpage = h2;
+         __my_get_swapin_mdata = h3;
+         printk("Qi Zhang: swap_bind_hook...\n");
+ }
+ 
+ void swap_unbind_hook(void)
+ {
+         mempipe_installed = false;
+         __my_swap_writepage = NULL;
+         __my_swap_readpage = NULL;
+         __my_get_swapin_mdata = NULL;
+         printk("Qi Zhang: swap_unbind_hook...\n");
+ }
+ 
+ EXPORT_SYMBOL(swap_bind_hook);
+ EXPORT_SYMBOL(swap_unbind_hook);
+ 
+ 
+ 
  static struct bio *get_swap_bio(gfp_t gfp_flags,
  				struct page *page, bio_end_io_t end_io)
  {
***************
*** 132,137 ****
--- 166,172 ----
  	unlock_page(page);
  	bio_put(bio);
  }
+ EXPORT_SYMBOL(end_swap_bio_read);
  
  int generic_swapfile_activate(struct swap_info_struct *sis,
  				struct file *swap_file,
***************
*** 233,238 ****
--- 268,275 ----
  {
  	int ret = 0;
  
+ 	struct swap_info_struct *sis = page_swap_info(page);
+ 
  	if (try_to_free_swap(page)) {
  		unlock_page(page);
  		goto out;
***************
*** 243,249 ****
  		end_page_writeback(page);
  		goto out;
  	}
! 	ret = __swap_writepage(page, wbc, end_swap_bio_write);
  out:
  	return ret;
  }
--- 280,291 ----
  		end_page_writeback(page);
  		goto out;
  	}
! 	//ret = __swap_writepage(page, wbc, end_swap_bio_write);
! 	if(mempipe_installed == true && sis->prio == -1){
!                 ret = __my_swap_writepage(page, wbc, end_swap_bio_write);
!         }else{
!                 ret = __swap_writepage(page, wbc, end_swap_bio_write);
!         }
  out:
  	return ret;
  }
diff -rcNP linux-3.14.4/mm/rmap.c linux-3.14.4-memSwap/mm/rmap.c
*** linux-3.14.4/mm/rmap.c	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/mm/rmap.c	2016-07-15 09:56:26.894956000 -0400
***************
*** 60,65 ****
--- 60,67 ----
  
  #include <asm/tlbflush.h>
  
+ #include <asm/pgtable.h>
+ 
  #include "internal.h"
  
  static struct kmem_cache *anon_vma_cachep;
***************
*** 617,622 ****
--- 619,631 ----
  		return NULL;
  
  	pte = pte_offset_map(pmd, address);
+ 	
+ 	/*Sometimes, we need the value of pte even if it is not present*/
+ 	if(sync == 8888){
+                 pte_unmap(pte);
+                 return pte;
+         }
+ 
  	/* Make a quick check before getting the lock */
  	if (!sync && !pte_present(*pte)) {
  		pte_unmap(pte);
***************
*** 1607,1612 ****
--- 1616,1623 ----
  	if (!anon_vma)
  		return ret;
  
+ 	page->idx = 0;
+ 
  	anon_vma_interval_tree_foreach(avc, &anon_vma->rb_root, pgoff, pgoff) {
  		struct vm_area_struct *vma = avc->vma;
  		unsigned long address = vma_address(page, vma);
***************
*** 1615,1620 ****
--- 1626,1639 ----
  			continue;
  
  		ret = rwc->rmap_one(page, vma, address, rwc->arg);
+ 		
+ 		if(page->idx < 10) {
+                         page->rmap_addrs[page->idx] = address;
+                         page->rmap_vmas[page->idx] = vma;
+                         page->idx++;
+                 }
+ 
+ 
  		if (ret != SWAP_AGAIN)
  			break;
  		if (rwc->done && rwc->done(page))
diff -rcNP linux-3.14.4/mm/swapfile.c linux-3.14.4-memSwap/mm/swapfile.c
*** linux-3.14.4/mm/swapfile.c	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/mm/swapfile.c	2016-07-20 10:17:48.017368000 -0400
***************
*** 46,51 ****
--- 46,66 ----
  static sector_t map_swap_entry(swp_entry_t, struct block_device**);
  
  DEFINE_SPINLOCK(swap_lock);
+ 
+ EXPORT_SYMBOL(swap_lock);
+ 
+ /*Initial size of memswap*/
+ static unsigned long memswap_init_size;
+ 
+ void set_memswap_init_size(unsigned long init_size){
+ 	memswap_init_size = init_size;
+ }
+ EXPORT_SYMBOL(set_memswap_init_size);
+ //#define PAGE_NUMS (1<<18) //256K pages -> 1GB
+ 
+ extern struct swapin_mdata * (* __my_get_swapin_mdata)(unsigned long offset);
+ extern bool mempipe_installed;
+ 
  static unsigned int nr_swapfiles;
  atomic_long_t nr_swap_pages;
  /* protected with swap_lock. reading in vm_swap_full() doesn't need lock */
***************
*** 1364,1369 ****
--- 1379,1389 ----
  	unsigned int i = 0;
  	int retval = 0;
  
+ 	struct swapin_mdata* sm = NULL;
+ 	unsigned long index1 = 0, index2 = 0, index3 = 0;
+         long long total1 = 0, total2 = 0, total3 = 0;
+         ktime_t start1, start2, start3, end1, end2, end3;
+ 
  	/*
  	 * When searching mms for an entry, a good strategy is to
  	 * start at the first mm we freed the previous entry from
***************
*** 1386,1397 ****
--- 1406,1419 ----
  	 * one pass through swap_map is enough, but not necessarily:
  	 * there are races when an instance of an entry might be missed.
  	 */
+ 
  	while ((i = find_next_to_unuse(si, i, frontswap)) != 0) {
  		if (signal_pending(current)) {
  			retval = -EINTR;
  			break;
  		}
  
+ 		start1 = ktime_get();
  		/*
  		 * Get a page for the entry, using the existing swap
  		 * cache page if there is one.  Otherwise, get a clean
***************
*** 1399,1404 ****
--- 1421,1429 ----
  		 */
  		swap_map = &si->swap_map[i];
  		entry = swp_entry(type, i);
+ 		
+ 		start2 = ktime_get();
+ 
  		page = read_swap_cache_async(entry,
  					GFP_HIGHUSER_MOVABLE, NULL, 0);
  		if (!page) {
***************
*** 1441,1446 ****
--- 1466,1476 ----
  		 */
  		wait_on_page_locked(page);
  		wait_on_page_writeback(page);
+ 		
+ 		end2 = ktime_get();
+         	total2 += ktime_to_ns(ktime_sub(end2, start2));
+                 index2++;
+ 		
  		lock_page(page);
  		wait_on_page_writeback(page);
  
***************
*** 1455,1462 ****
--- 1485,1520 ----
  				break;
  			continue;
  		}
+ 
+ 		start3 = ktime_get();
+ 
+ 		
+ 		/*
  		if (swap_count(swcount) && start_mm != &init_mm)
  			retval = unuse_mm(start_mm, entry, page);
+ 		*/
+ 
+ 		if(mempipe_installed == false) {
+                         if (swap_count(swcount) && start_mm != &init_mm)
+                                 retval = unuse_mm(start_mm, entry, page);
+                 }else{
+                         if (swap_count(swcount) && start_mm != &init_mm) {
+                                 sm = __my_get_swapin_mdata(i);
+                                 if(sm == NULL) {
+                                         retval = unuse_mm(start_mm, entry, page);
+                                         //if(sm != NULL)
+                                         //printk("sm->vma = %p, sm->pmd = %p, sm->addr = %ld\n", sm->vma, sm->pmd, sm->address);
+                                 }else{
+                                         retval = unuse_pte(sm->vma, sm->pmd, sm->address, entry, page);
+                                         retval = (retval < 0)?retval:0;
+                                 }
+ 
+                         }
+                 }
+ 
+ 		end3 = ktime_get();
+                 total3 += ktime_to_ns(ktime_sub(end3, start3));
+                 index3++;
  
  		if (swap_count(*swap_map)) {
  			int set_start_mm = (*swap_map >= swcount);
***************
*** 1565,1571 ****
--- 1623,1634 ----
  			if (!--pages_to_unuse)
  				break;
  		}
+ 
+ 		end1 = ktime_get();
+                 total1 += ktime_to_ns(ktime_sub(end1, start1));
+                 index1++;
  	}
+ 	printk("read = %lld, unuse_mm = %lld, whole = %lld\n", total2/index2, total3/index3, total1/index1);
  
  	mmput(start_mm);
  	return retval;
***************
*** 1634,1640 ****
  	entry.val = page_private(page);
  	return map_swap_entry(entry, bdev);
  }
! 
  /*
   * Free all of a swapdev's extent information
   */
--- 1697,1703 ----
  	entry.val = page_private(page);
  	return map_swap_entry(entry, bdev);
  }
! EXPORT_SYMBOL(map_swap_page);
  /*
   * Free all of a swapdev's extent information
   */
***************
*** 2245,2250 ****
--- 2308,2316 ----
  	if (!maxpages)
  		return 0;
  	swapfilepages = i_size_read(inode) >> PAGE_SHIFT;
+ 	
+ 	printk("swapfilepages = %lu, maxpages = %lu\n", swapfilepages, maxpages);
+ 
  	if (swapfilepages && maxpages > swapfilepages) {
  		pr_warn("Swap area shorter than signature indicates\n");
  		return 0;
***************
*** 2385,2390 ****
--- 2451,2458 ----
  	if (IS_ERR(p))
  		return PTR_ERR(p);
  
+ 	p->shm = NULL;
+ 
  	INIT_WORK(&p->discard_work, swap_discard_work);
  
  	name = getname(specialfile);
***************
*** 2434,2439 ****
--- 2502,2517 ----
  	}
  	swap_header = kmap(page);
  
+ 	/*The first (highest priority) swap partition is the shm area.
+          *Size of the shm area is explicitely specified
+          */
+         /*
+ 	if(nr_swapfiles == 1 && mempipe_installed == true) {//nr_swapfiles of the first swap partition equals to 1
+                 swap_header->info.last_page = memswap_init_size - 1024 - 1;
+                 swap_header->info.nr_badpages = 0;
+         }
+ 	*/
+ 
  	maxpages = read_swap_header(p, swap_header, inode);
  	if (unlikely(!maxpages)) {
  		error = -EINVAL;
***************
*** 2718,2723 ****
--- 2796,2802 ----
  	BUG_ON(!PageSwapCache(page));
  	return swap_info[swp_type(swap)];
  }
+ EXPORT_SYMBOL(page_swap_info);
  
  /*
   * out-of-line __page_file_ methods to avoid include hell.
diff -rcNP linux-3.14.4/mm/swap_state.c linux-3.14.4-memSwap/mm/swap_state.c
*** linux-3.14.4/mm/swap_state.c	2014-05-13 07:33:14.000000000 -0400
--- linux-3.14.4-memSwap/mm/swap_state.c	2016-07-15 10:13:53.234956000 -0400
***************
*** 21,26 ****
--- 21,29 ----
  
  #include <asm/pgtable.h>
  
+ extern bool mempipe_installed;
+ extern int (* __my_swap_readpage)(struct page *page);
+ 
  /*
   * swapper_space is a fiction, retained to simplify the path through
   * vmscan's shrink_page_list.
***************
*** 310,315 ****
--- 313,320 ----
  	struct page *found_page, *new_page = NULL;
  	int err;
  
+ 	struct swap_info_struct *sis;
+ 
  	do {
  		/*
  		 * First check the swap cache.  Since this is normally
***************
*** 376,382 ****
  			 * Initiate read into locked page and return.
  			 */
  			lru_cache_add_anon(new_page);
! 			swap_readpage(new_page);
  			return new_page;
  		}
  		radix_tree_preload_end();
--- 381,395 ----
  			 * Initiate read into locked page and return.
  			 */
  			lru_cache_add_anon(new_page);
! 			//swap_readpage(new_page);
! 			
! 			sis = page_swap_info(new_page);
!                         if(mempipe_installed == true && sis->prio == -1) {
!                                 __my_swap_readpage(new_page);
!                         }else{
!                                 swap_readpage(new_page);
!                         }
! 
  			return new_page;
  		}
  		radix_tree_preload_end();
diff -rcNP linux-3.14.4/security/tomoyo/builtin-policy.h linux-3.14.4-memSwap/security/tomoyo/builtin-policy.h
*** linux-3.14.4/security/tomoyo/builtin-policy.h	1969-12-31 19:00:00.000000000 -0500
--- linux-3.14.4-memSwap/security/tomoyo/builtin-policy.h	2016-07-15 10:16:24.856955000 -0400
***************
*** 0 ****
--- 1,12 ----
+ static char tomoyo_builtin_profile[] __initdata =
+ "";
+ static char tomoyo_builtin_exception_policy[] __initdata =
+ "initialize_domain /sbin/modprobe from any\n"
+ "initialize_domain /sbin/hotplug from any\n"
+ "";
+ static char tomoyo_builtin_domain_policy[] __initdata =
+ "";
+ static char tomoyo_builtin_manager[] __initdata =
+ "";
+ static char tomoyo_builtin_stat[] __initdata =
+ "";
diff -rcNP linux-3.14.4/security/tomoyo/policy/exception_policy.conf linux-3.14.4-memSwap/security/tomoyo/policy/exception_policy.conf
*** linux-3.14.4/security/tomoyo/policy/exception_policy.conf	1969-12-31 19:00:00.000000000 -0500
--- linux-3.14.4-memSwap/security/tomoyo/policy/exception_policy.conf	2016-07-15 10:16:15.076955000 -0400
***************
*** 0 ****
--- 1,2 ----
+ initialize_domain /sbin/modprobe from any
+ initialize_domain /sbin/hotplug from any
